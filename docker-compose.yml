services:
  loki:
    image: grafana/loki:1.5.0
    labels:
      - traefik.enable=true
      - traefik.http.routers.loki.rule=Host(`loki.${DEVDOMAIN}`)
      - traefik.http.services.loki.loadbalancer.server.port=3100
      - traefik.http.routers.loki.entrypoints=web
      - traefik.http.routers.loki.middlewares=forcehttps
      - traefik.http.routers.loki-tls.tls=true
      - traefik.http.routers.loki-tls.rule=Host(`loki.${DEVDOMAIN}`)
      - traefik.http.routers.loki-tls.entrypoints=websecure
      - traefik.http.routers.loki-tls.tls.certresolver=le
      - traefik.http.routers.loki-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=loki
      - tls-cert-host-check=loki.${DEVDOMAIN}
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    healthcheck:
      test: wget http://localhost:3100/ready -S -O -
      interval: 5s
      retries: 30
    networks:
      - backendnetwork

  traefik:
    image: traefik:latest
    command: [
      "--providers.docker=true",
      "--providers.docker.endpoint=unix:///var/run/docker.sock",
      "--providers.docker.swarmMode=false",
      "--providers.docker.exposedByDefault=false",
      "--entryPoints.web.address=:80",
      "--entryPoints.websecure.address=:443",
      "--entryPoints.traefik.address=:8080",
      "--entryPoints.ping.address=:8082",
      "--entryPoints.metrics.address=:9090",
      "--certificatesResolvers.le.acme.email=${LETSENCRYPT_EMAILADDRESS}",
      "--certificatesResolvers.le.acme.storage=/acme/acme.json",
      "--certificatesResolvers.le.acme.httpChallenge=false",
      "--certificatesResolvers.le.acme.tlsChallenge=false",
      "--certificatesResolvers.le.acme.dnsChallenge=true",
      "--certificatesResolvers.le.acme.dnsChallenge.provider=route53",
      "--certificatesResolvers.le.acme.dnsChallenge.delayBeforeCheck=1",
      "--certificatesResolvers.le.acme.dnsChallenge.resolvers=8.8.8.8:53, 8.8.4.4:53",
      "--metrics.prometheus=true",
      "--metrics.prometheus.addEntryPointsLabels=true",
      "--metrics.prometheus.addServicesLabels=true",
      "--metrics.prometheus.entryPoint=metrics",
      "--ping=true",
      "--ping.entryPoint=ping",
      "--api=true",
      "--api.insecure=true",
      "--api.dashboard=true",
      "--api.debug=true",
      "--log.filePath=/dev/stdout",
      "--log.level=DEBUG",
      "--accesslog=true",
      "--accesslog.filepath=/dev/stderr",
    ]
    labels:
      - traefik.http.middlewares.forcehttps.redirectscheme.scheme=https
      - traefik.http.middlewares.forcehttps.redirectscheme.permanent=true
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DEVDOMAIN}`)
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.middlewares=forcehttps
      - traefik.http.routers.traefik-tls.tls=true
      - traefik.http.routers.traefik-tls.rule=Host(`traefik.${DEVDOMAIN}`)
      - traefik.http.routers.traefik-tls.entrypoints=websecure
      - traefik.http.routers.traefik-tls.tls.certresolver=le
      - traefik.http.routers.traefik-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=traefik
      - tls-cert-host-check=traefik.${DEVDOMAIN}
    environment:
      AWS_ACCESS_KEY_ID: ${DNS_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${DNS_AWS_SECRET_ACCESS_KEY}
      AWS_HOSTED_ZONE_ID: ${AWS_HOSTED_ZONE_ID}
      AWS_REGION: ${AWS_REGION}
    ports:
      - "80:80"
      - "443:443"
      - "8082:8082"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/acme
    networks:
      - dmz
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: wget http://localhost:8082/ping -S -O -
      interval: 5s
      retries: 30
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      POSTGRES_USER: ${DATABASE_ROOT_USER}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - pg-data:/var/lib/postgresql/data
    labels:
      - traefik.enable=false
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${DATABASE_ROOT_USER}
      interval: 5s
      retries: 30
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  redis:
    image: redis:alpine
    command: /usr/local/etc/redis/redis.conf
    labels:
      - com_docker_swarm_service_name=redis
    ports:
      - "6379:6379"
    volumes:
      - ./dev-config/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-data:/data
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test:  '[[ $$(redis-cli ping) == "PONG" ]] && echo UP'
      retries: 30
      interval: 5s
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  prometheus:
    image: prom/prometheus
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DEVDOMAIN}`)
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      - traefik.http.routers.prometheus.entrypoints=web
      - traefik.http.routers.prometheus.middlewares=forcehttps
      - traefik.http.routers.prometheus-tls.tls=true
      - traefik.http.routers.prometheus-tls.rule=Host(`prometheus.${DEVDOMAIN}`)
      - traefik.http.routers.prometheus-tls.entrypoints=websecure
      - traefik.http.routers.prometheus-tls.tls.certresolver=le
      - traefik.http.routers.prometheus-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=prometheus
      - tls-cert-host-check=prometheus.${DEVDOMAIN}
    ports:
      - "9090:9090"
    volumes:
      - ./dev-config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: wget http://localhost:9090 -S -O -
      interval: 5s
      retries: 30
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  node-exporter:
    image: prom/node-exporter
    command: --path.rootfs=/host
    volumes:
      - /:/host:ro
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: wget http://localhost:9100/metrics -S -O -
      interval: 5s
      retries: 30
    depends_on:
      - redis
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    container_name: cadvisor
    labels:
      - traefik.enable=true
      - traefik.http.routers.cadvisor.rule=Host(`cadvisor.${DEVDOMAIN}`)
      - traefik.http.services.cadvisor.loadbalancer.server.port=8080
      - traefik.http.routers.cadvisor.entrypoints=web
      - traefik.http.routers.cadvisor.middlewares=forcehttps
      - traefik.http.routers.cadvisor-tls.tls=true
      - traefik.http.routers.cadvisor-tls.rule=Host(`cadvisor.${DEVDOMAIN}`)
      - traefik.http.routers.cadvisor-tls.entrypoints=websecure
      - traefik.http.routers.cadvisor-tls.tls.certresolver=le
      - traefik.http.routers.cadvisor-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=cadvisor
      - tls-cert-host-check=cadvisor.${DEVDOMAIN}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - backendnetwork
    restart: unless-stopped
    depends_on:
      - redis
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  smtp:
    image: rnwood/smtp4dev:linux-amd64-v3
    hostname: smtp
    command: ["--db" ,"/data/messages.db"]
    networks:
      - backendnetwork
    volumes:
      - smtp-data:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.mail.rule=Host(`mail.${DEVDOMAIN}`)
      - traefik.http.services.mail.loadbalancer.server.port=80
      - traefik.http.routers.mail.entrypoints=web
      - traefik.http.routers.mail.middlewares=forcehttps
      - traefik.http.routers.mail-tls.tls=true
      - traefik.http.routers.mail-tls.rule=Host(`mail.${DEVDOMAIN}`)
      - traefik.http.routers.mail-tls.entrypoints=websecure
      - traefik.http.routers.mail-tls.tls.certresolver=le
      - traefik.http.routers.mail-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=mail
      - tls-cert-host-check=mail.${DEVDOMAIN}
    restart: unless-stopped
    healthcheck:
      test: curl http://localhost:80
      interval: 5s
      retries: 30
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  flyway:
    build:
      context: sql/
      dockerfile: Dockerfile
    image: mersthamcc/flyway:latest
    command: ["migrate"]
    volumes:
      - ./sql/dev-migrations:/flyway/dev-migrations
    environment:
      FLYWAY_URL: ${DATABASE_BASE_URL}/${DATABASE_NAME}
      FLYWAY_USER: ${DATABASE_ROOT_USER}
      FLYWAY_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      FLYWAY_LOCATIONS: "filesystem:/flyway/sql,filesystem:/flyway/dev-migrations"
      FLYWAY_PLACEHOLDERS_SITENAME: www.${DEVDOMAIN}
      FLYWAY_PLACEHOLDERS_ADMIN_USER: ${ADMIN_EMAILADDRESS}
      FLYWAY_PLACEHOLDERS_CONTENT_USER: ${DATABASE_USER}
      FLYWAY_PLACEHOLDERS_CONTENT_USER_PASSWORD: ${DATABASE_PASSWORD}
      FLYWAY_PLACEHOLDERS_DATABASE_NAME: ${DATABASE_NAME}
      FLYWAY_PLACEHOLDERS_APPS_DATABASE_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      FLYWAY_PLACEHOLDERS_JUNIOR_CODE: ${JUNIOR_REGISTRATION_CODE}
      FLYWAY_MIXED: "true"
    networks:
      - backendnetwork
    restart: on-failure
    depends_on:
      - postgres
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  grafana:
    image: grafana/grafana:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DEVDOMAIN}`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.entrypoints=web
      - traefik.http.routers.grafana.middlewares=forcehttps
      - traefik.http.routers.grafana-tls.tls=true
      - traefik.http.routers.grafana-tls.rule=Host(`grafana.${DEVDOMAIN}`)
      - traefik.http.routers.grafana-tls.entrypoints=websecure
      - traefik.http.routers.grafana-tls.tls.certresolver=le
      - traefik.http.routers.grafana-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=grafana
      - tls-cert-host-check=grafana.${DEVDOMAIN}
    environment:
      GF_SERVER_ROOT_URL: http://grafana.${DEVDOMAIN}
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_AUTH_DISABLE_LOGIN_FORM: "false"
      GF_SECURITY_AUTO_ASSIGN_ORG: "true"
      GF_AUTH_GENERIC_OAUTH_ENABLED: ${GF_AUTH_GENERIC_OAUTH_ENABLED}
      GF_AUTH_GENERIC_OAUTH_NAME: ${DEVDOMAIN}
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: https://login.${DEVDOMAIN}/oauth2/authorize
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: https://login.${DEVDOMAIN}/oauth2/token
      GF_AUTH_GENERIC_OAUTH_API_URL: https://login.${DEVDOMAIN}/oauth2/userinfo"
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: ${GF_AUTH_GENERIC_OAUTH_ENABLED}
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${GF_AUTH_GENERIC_OAUTH_CLIENT_ID}
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET}
      GF_PATHS_PROVISIONING: /provision
      MCC_CONTENT_SERVER: postgres
      MCC_CONTENT_USER: ${DATABASE_ROOT_USER}
      MCC_CONTENT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      MCC_CONTENT_DATABASE: ${DATABASE_NAME}
    volumes:
      - ./dev-config/grafana/dashboards:/provision/dashboards:ro
      - ./dev-config/grafana/datasources.yaml:/provision/datasources/datasources.yaml:ro
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: wget http://localhost:3000 -S -O -
      interval: 5s
      retries: 30
    depends_on:
      - loki
    ports:
      - "3000:3000"
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  promtail:
    image: grafana/promtail:1.5.0
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/docker-config.yaml
    networks:
      - backendnetwork
    restart: unless-stopped
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.8.0
    command: -nginx.scrape-uri http://web:8080/stub_status
    networks:
      - backendnetwork
    restart: unless-stopped
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  pgadmin:
    image: dpage/pgadmin4:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.postgres.rule=Host(`postgres.${DEVDOMAIN}`)
      - traefik.http.services.postgres.loadbalancer.server.port=80
      - traefik.http.routers.postgres.entrypoints=web
      - traefik.http.routers.postgres.middlewares=forcehttps
      - traefik.http.routers.postgres-tls.tls=true
      - traefik.http.routers.postgres-tls.rule=Host(`postgres.${DEVDOMAIN}`)
      - traefik.http.routers.postgres-tls.entrypoints=websecure
      - traefik.http.routers.postgres-tls.tls.certresolver=le
      - traefik.http.routers.postgres-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=postgres
      - tls-cert-host-check=postgres.${DEVDOMAIN}
    environment:
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False" # pragma: allowlist secret
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAILADDRESS}
      PGADMIN_DEFAULT_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - ./dev-config/pgadmin4/servers.json:/pgadmin4/servers.json:ro
      - ~/.ssh:/pgadmin4/ssh:ro
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: wget http://localhost:80 -S -O -
      interval: 5s
      retries: 30
    depends_on:
      - loki
      - postgres
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  rediscommander:
    image: rediscommander/redis-commander
    labels:
      - traefik.enable=true
      - traefik.http.routers.redis.rule=Host(`redis.${DEVDOMAIN}`)
      - traefik.http.services.redis.loadbalancer.server.port=8081
      - traefik.http.routers.redis.entrypoints=web
      - traefik.http.routers.redis.middlewares=forcehttps
      - traefik.http.routers.redis-tls.tls=true
      - traefik.http.routers.redis-tls.rule=Host(`redis.${DEVDOMAIN}`)
      - traefik.http.routers.redis-tls.entrypoints=websecure
      - traefik.http.routers.redis-tls.tls.certresolver=le
      - traefik.http.routers.redis-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=redis
      - tls-cert-host-check=redis.${DEVDOMAIN}
    environment:
      REDIS_HOST: redis
      REDIS_TLS: "false"
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: wget http://127.0.0.1:8081 -S -O -
      interval: 5s
      retries: 30
    depends_on:
      - loki
      - redis
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  vault:
    build:
      context: infrastructure/Dockerfiles/vault
    labels:
      - traefik.enable=true
      - traefik.http.routers.vault.rule=Host(`vault.${DEVDOMAIN}`)
      - traefik.http.services.vault.loadbalancer.server.port=8200
      - traefik.http.routers.vault.entrypoints=web
      - traefik.http.routers.vault.middlewares=forcehttps
      - traefik.http.routers.vault-tls.tls=true
      - traefik.http.routers.vault-tls.rule=Host(`vault.${DEVDOMAIN}`)
      - traefik.http.routers.vault-tls.entrypoints=websecure
      - traefik.http.routers.vault-tls.tls.certresolver=le
      - traefik.http.routers.vault-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=vault
      - tls-cert-host-check=vault.${DEVDOMAIN}
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      VAULT_LOCAL_CONFIG: |
        {
          "plugin_directory": "/vault/plugins",
          "plugin_tmpdir": "/tmp/vault",
          "ui": true
        }

    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: vault status -address http://127.0.0.1:8200
      interval: 5s
      retries: 30
    platform: linux/amd64
    depends_on:
      - loki
      - postgres
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  vault-terraform:
    image: hashicorp/terraform:1.9.6
    environment:
      TF_DATA_DIR: /tmp/.terraform/
      TF_VAR_vault_token: ${VAULT_TOKEN}
      TF_VAR_vault_address: http://vault:8200
      TF_VAR_twitter_client_id: ${TWITTER_CLIENT_ID}
      TF_VAR_twitter_client_secret: ${TWITTER_CLIENT_SECRET}
    volumes:
      - ./dev-config/vault:/src
      - ./infrastructure/Dockerfiles/vault/plugins:/vault/plugins
    working_dir: /src
    entrypoint: sh
    command: -c "terraform init -input=false && terraform apply -auto-approve"
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - backendnetwork

  vault-cli:
    build:
      context: infrastructure/Dockerfiles/vault
    entrypoint:
      - vault
    command: help
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_ADDR: http://vault:8200
    networks:
      - backendnetwork

  resources:
    image: minio/minio:RELEASE.2020-07-22T00-26-33Z
    labels:
      - traefik.enable=true
      - traefik.http.routers.resources.rule=Host(`resources.${DEVDOMAIN}`)
      - traefik.http.services.resources.loadbalancer.server.port=9000
      - traefik.http.routers.resources.entrypoints=web
      - traefik.http.routers.resources.middlewares=forcehttps
      - traefik.http.routers.resources-tls.tls=true
      - traefik.http.routers.resources-tls.rule=Host(`resources.${DEVDOMAIN}`)
      - traefik.http.routers.resources-tls.entrypoints=websecure
      - traefik.http.routers.resources-tls.tls.certresolver=le
      - traefik.http.routers.resources-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=resources
      - tls-cert-host-check=resources.${DEVDOMAIN}
    command: server /data
    environment:
      MINIO_DOMAIN: resources.${DEVDOMAIN},localhost:9000
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./infrastructure/assets:/data
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: curl http://localhost:9000
      interval: 5s
      retries: 30
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  dynamodb:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ."
    image: "amazon/dynamodb-local:latest"
    ports:
      - "8000:8000"
    volumes:
      - dynamodb-data:/home/dynamodblocal/data
    networks:
      - backendnetwork
    working_dir: /home/dynamodblocal
    labels:
      - traefik.enable=true
      - traefik.http.routers.dynamodb.rule=Host(`dynamodb.${DEVDOMAIN}`)
      - traefik.http.services.dynamodb.loadbalancer.server.port=8000
      - traefik.http.routers.dynamodb.entrypoints=web
      - traefik.http.routers.dynamodb.middlewares=forcehttps
      - traefik.http.routers.dynamodb-tls.tls=true
      - traefik.http.routers.dynamodb-tls.rule=Host(`dynamodb.${DEVDOMAIN}`)
      - traefik.http.routers.dynamodb-tls.entrypoints=websecure
      - traefik.http.routers.dynamodb-tls.tls.certresolver=le
      - traefik.http.routers.dynamodb-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=dynamodb
      - tls-cert-host-check=dynamodb.${DEVDOMAIN}
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"

  dynamodb_admin:
    image: aaronshaf/dynamodb-admin
    networks:
      - backendnetwork
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb:8000
    labels:
      - traefik.enable=true
      - traefik.http.routers.dynamo-admin.rule=Host(`dynamo-admin.${DEVDOMAIN}`)
      - traefik.http.services.dynamo-admin.loadbalancer.server.port=8001
      - traefik.http.routers.dynamo-admin.entrypoints=web
      - traefik.http.routers.dynamo-admin.middlewares=forcehttps
      - traefik.http.routers.dynamo-admin-tls.tls=true
      - traefik.http.routers.dynamo-admin-tls.rule=Host(`dynamo-admin.${DEVDOMAIN}`)
      - traefik.http.routers.dynamo-admin-tls.entrypoints=websecure
      - traefik.http.routers.dynamo-admin-tls.tls.certresolver=le
      - traefik.http.routers.dynamo-admin-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=dynamo-admin
      - tls-cert-host-check=dynamo-admin.${DEVDOMAIN}
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
    restart: unless-stopped

  jupyterhub:
    build:
      context: infrastructure/Dockerfiles/jupyterhub
    networks:
      - backendnetwork
    labels:
      - traefik.enable=true
      - traefik.http.routers.jupyterhub.rule=Host(`hub.${DEVDOMAIN}`)
      - traefik.http.services.jupyterhub.loadbalancer.server.port=8000
      - traefik.http.routers.jupyterhub.entrypoints=web
      - traefik.http.routers.jupyterhub.middlewares=forcehttps
      - traefik.http.routers.jupyterhub-tls.tls=true
      - traefik.http.routers.jupyterhub-tls.rule=Host(`hub.${DEVDOMAIN}`)
      - traefik.http.routers.jupyterhub-tls.entrypoints=websecure
      - traefik.http.routers.jupyterhub-tls.tls.certresolver=le
      - traefik.http.routers.jupyterhub-tls.tls.domains[0].main=*.${DEVDOMAIN}
      - com_docker_swarm_service_name=hub
      - tls-cert-host-check=hub.${DEVDOMAIN}
    environment:
      DOCKER_NETWORK_NAME: website_backendnetwork
      DOCKER_NOTEBOOK_IMAGE: "mersthamcc/jupyterhub-notebook"
      OAUTH_CLIENT_ID: ${JUPYTER_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${JUPYTER_CLIENT_SECRET}
      COGNITO_UI_URI: ${COGNITO_UI_URI}
      BASE_URL: https://hub.${DEVDOMAIN}
      IDP_NAME: ${DEVDOMAIN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
    restart: unless-stopped

  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
      NGROK_HOST: ${NGROK_HOST}
    command:
      - "http"
      - "--domain=${NGROK_HOST}"
      - "host.docker.internal:8090"
    ports:
      - 4040:4040
#    depends_on:
#      - loki
#    logging:
#      driver: loki
#      options:
#        loki-url: "http://localhost:3100/loki/api/v1/push"
volumes:
  pg-data:
  redis-config:
  redis-data:
  smtp-data:
  dynamodb-data:

networks:
  backendnetwork:
  dmz:
