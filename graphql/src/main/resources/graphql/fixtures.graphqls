type Player {
    id: Int!
    name: String!
    captain: Boolean
    wicketKeeper: Boolean

    statistics(season: Int!): Statistics
}

type Statistics {
    player: Player
    matches: Int
    runs: Int
    wickets: Int
    catches: Int
    maidens: Int
    fifties: Int
    hundreds: Int
    ducks: Int
    concededRuns: Int
    notOut: Int
    overs: Float
}

type Team {
    id: Int!
    name: String!
    status: String

    league (season: Int!): [League!]
    fixtures (season: Int!): [Fixture!]

    captain: Player
}

type Fixture {
    id: Int!
    team: Team!
    opposition: String!
    date: Date
    start: String
    homeAway: String!
    groundId: Int
    detail: Json
    players: [Player]
}

type League {
    id: Int!,
    name: String!,
    lastUpdate: DateTime,
    table: Json
}

extend type Query {
    team(id: Int!): Team
    teams: [Team]
    activeTeams: [Team]
    fixtures(season: Int!): [Fixture]
    fixtureArchiveSeasons: [Int]
    players: [Player]
    allFixturesForTeam(id: Int!): [Fixture]
    thisWeeksSelection: [Fixture]
    fixtureCount: Int!
    fixtureWinCount: Int!
    upcomingFixtures(count: Int!): [Fixture]
#    leaguesForTeam(season: Int!, team: Int!): [League]
}

extend type Mutation {
    refreshFixtures(season: Int!): [Fixture]
    refreshTeams: [Team]
}
